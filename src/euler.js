var Util = require('./util');

/* Problem 1 - Multiples of 3 and 5
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get
 * 3, 5, 6 and 9. The sum of these multiples is 23.
 *
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
module.exports.problem1 = function(limit) {
  var sum = 0;
  for (var i = 3; i < limit; i++) {
    if (i % 3 == 0 || i % 5 == 0) {
      sum += i;
    }
  }
  return sum;
}

/*
 * Problem 2 - Even Fibonacci numbers
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */
module.exports.problem2 = function(limit) {
  var sum = 0;
  var last = 1;
  for (current = 2; current < limit; /* Incremented below */) {
    if (current % 2 == 0) {
      sum += current;
    }
    current = last + current;
    last = current - last;
  }
  return sum;
}

/*
 * Problem 3 - Largest prime factor
 * The prime factors of 13195 are 5, 7, 13 and 29.
 *
 * What is the largest prime factor of the number 600851475143 ?
 */
module.exports.problem3 = function(n) {
  var factors = Util.findPrimeFactors(n);
  return factors.pop();
}

/*
 * Problem 4 - Largest palindrome product
 * A palindromic number reads the same both ways. The largest palindrome made
 * from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
 *
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
module.exports.problem4 = function(n) {
  var LARGEST_n_DIGIT_NUMBER = (Math.pow(10,n))-1;

  // Setup the object to compare against for found palindromes
  var largestPalindrome = new Object();
  largestPalindrome.number = 0;

  for (var r = LARGEST_n_DIGIT_NUMBER; r > 0; r--) {
    for (var c = LARGEST_n_DIGIT_NUMBER; c >= r; c--) {
      if (Util.isPalindrome(r*c) && (r*c > largestPalindrome.number)) {
        largestPalindrome.number = r*c;
        largestPalindrome.identities = [r,c];
      }
    }
  }

  return largestPalindrome;
}
